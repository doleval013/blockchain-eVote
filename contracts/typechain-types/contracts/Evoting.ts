/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace Evoting {
  export type ElectionStruct = {
    id: BigNumberish;
    electionName: string;
    duration: BigNumberish;
    stage: BigNumberish;
  };

  export type ElectionStructOutput = [
    id: bigint,
    electionName: string,
    duration: bigint,
    stage: bigint
  ] & { id: bigint; electionName: string; duration: bigint; stage: bigint };

  export type CandidateStruct = {
    name: string;
    party: string;
    candidateIdHash: BytesLike;
    votes: BigNumberish;
    regId: BigNumberish;
  };

  export type CandidateStructOutput = [
    name: string,
    party: string,
    candidateIdHash: string,
    votes: bigint,
    regId: bigint
  ] & {
    name: string;
    party: string;
    candidateIdHash: string;
    votes: bigint;
    regId: bigint;
  };

  export type VoterStruct = { isRegistered: boolean; account: AddressLike };

  export type VoterStructOutput = [isRegistered: boolean, account: string] & {
    isRegistered: boolean;
    account: string;
  };
}

export interface EvotingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "DEFAULT_ADMIN_ROLE"
      | "createElection"
      | "electionWinner"
      | "endElection"
      | "getElectionById"
      | "getElectionCandidates"
      | "getElectionToCandidates"
      | "getElections"
      | "getRoleAdmin"
      | "getVoterVoteStatus"
      | "getVoters"
      | "grantRole"
      | "hasRole"
      | "owner"
      | "registerCandidatesToElection"
      | "registerVoter"
      | "renounceRole"
      | "revokeRole"
      | "startElection"
      | "supportsInterface"
      | "vote"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "CreatedElection"
      | "RoleAdminChanged"
      | "RoleGranted"
      | "RoleRevoked"
      | "VoterRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createElection",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "electionWinner",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "endElection",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getElectionById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getElectionCandidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getElectionToCandidates",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getElections",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getVoterVoteStatus",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "getVoters", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "registerCandidatesToElection",
    values: [string, string, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerVoter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [BytesLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "startElection",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "vote",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "electionWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "endElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectionById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectionCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElectionToCandidates",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getElections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVoterVoteStatus",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVoters", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerCandidatesToElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerVoter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startElection",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "vote", data: BytesLike): Result;
}

export namespace CreatedElectionEvent {
  export type InputTuple = [electionId: BigNumberish];
  export type OutputTuple = [electionId: bigint];
  export interface OutputObject {
    electionId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleAdminChangedEvent {
  export type InputTuple = [
    role: BytesLike,
    previousAdminRole: BytesLike,
    newAdminRole: BytesLike
  ];
  export type OutputTuple = [
    role: string,
    previousAdminRole: string,
    newAdminRole: string
  ];
  export interface OutputObject {
    role: string;
    previousAdminRole: string;
    newAdminRole: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleGrantedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RoleRevokedEvent {
  export type InputTuple = [
    role: BytesLike,
    account: AddressLike,
    sender: AddressLike
  ];
  export type OutputTuple = [role: string, account: string, sender: string];
  export interface OutputObject {
    role: string;
    account: string;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRegisteredEvent {
  export type InputTuple = [voter: AddressLike];
  export type OutputTuple = [voter: string];
  export interface OutputObject {
    voter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Evoting extends BaseContract {
  connect(runner?: ContractRunner | null): Evoting;
  waitForDeployment(): Promise<this>;

  interface: EvotingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  DEFAULT_ADMIN_ROLE: TypedContractMethod<[], [string], "view">;

  createElection: TypedContractMethod<
    [_electionName: string],
    [void],
    "nonpayable"
  >;

  electionWinner: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        name: string;
        party: string;
        candidateIdHash: string;
        votes: bigint;
        regId: bigint;
      }
    ],
    "view"
  >;

  endElection: TypedContractMethod<
    [_electionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getElectionById: TypedContractMethod<
    [_electionId: BigNumberish],
    [Evoting.ElectionStructOutput],
    "view"
  >;

  getElectionCandidates: TypedContractMethod<
    [_electionId: BigNumberish],
    [Evoting.CandidateStructOutput[]],
    "view"
  >;

  getElectionToCandidates: TypedContractMethod<
    [_electionId: BigNumberish],
    [Evoting.CandidateStructOutput[]],
    "view"
  >;

  getElections: TypedContractMethod<
    [],
    [Evoting.ElectionStructOutput[]],
    "view"
  >;

  getRoleAdmin: TypedContractMethod<[role: BytesLike], [string], "view">;

  getVoterVoteStatus: TypedContractMethod<
    [_electionId: BigNumberish, _account: AddressLike],
    [boolean],
    "view"
  >;

  getVoters: TypedContractMethod<[], [Evoting.VoterStructOutput[]], "view">;

  grantRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  hasRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  registerCandidatesToElection: TypedContractMethod<
    [
      _candidateName: string,
      _party: string,
      candidateIdHash: BytesLike,
      _electionId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  registerVoter: TypedContractMethod<
    [_account: AddressLike],
    [void],
    "nonpayable"
  >;

  renounceRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  revokeRole: TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;

  startElection: TypedContractMethod<
    [_durationInSecond: BigNumberish, _electionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  vote: TypedContractMethod<
    [_candidateId: BigNumberish, _electionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "DEFAULT_ADMIN_ROLE"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createElection"
  ): TypedContractMethod<[_electionName: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "electionWinner"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, bigint, bigint] & {
        name: string;
        party: string;
        candidateIdHash: string;
        votes: bigint;
        regId: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "endElection"
  ): TypedContractMethod<[_electionId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getElectionById"
  ): TypedContractMethod<
    [_electionId: BigNumberish],
    [Evoting.ElectionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getElectionCandidates"
  ): TypedContractMethod<
    [_electionId: BigNumberish],
    [Evoting.CandidateStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getElectionToCandidates"
  ): TypedContractMethod<
    [_electionId: BigNumberish],
    [Evoting.CandidateStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getElections"
  ): TypedContractMethod<[], [Evoting.ElectionStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getRoleAdmin"
  ): TypedContractMethod<[role: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getVoterVoteStatus"
  ): TypedContractMethod<
    [_electionId: BigNumberish, _account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getVoters"
  ): TypedContractMethod<[], [Evoting.VoterStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "grantRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "hasRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "registerCandidatesToElection"
  ): TypedContractMethod<
    [
      _candidateName: string,
      _party: string,
      candidateIdHash: BytesLike,
      _electionId: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerVoter"
  ): TypedContractMethod<[_account: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "renounceRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "revokeRole"
  ): TypedContractMethod<
    [role: BytesLike, account: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "startElection"
  ): TypedContractMethod<
    [_durationInSecond: BigNumberish, _electionId: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "vote"
  ): TypedContractMethod<
    [_candidateId: BigNumberish, _electionId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "CreatedElection"
  ): TypedContractEvent<
    CreatedElectionEvent.InputTuple,
    CreatedElectionEvent.OutputTuple,
    CreatedElectionEvent.OutputObject
  >;
  getEvent(
    key: "RoleAdminChanged"
  ): TypedContractEvent<
    RoleAdminChangedEvent.InputTuple,
    RoleAdminChangedEvent.OutputTuple,
    RoleAdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "RoleGranted"
  ): TypedContractEvent<
    RoleGrantedEvent.InputTuple,
    RoleGrantedEvent.OutputTuple,
    RoleGrantedEvent.OutputObject
  >;
  getEvent(
    key: "RoleRevoked"
  ): TypedContractEvent<
    RoleRevokedEvent.InputTuple,
    RoleRevokedEvent.OutputTuple,
    RoleRevokedEvent.OutputObject
  >;
  getEvent(
    key: "VoterRegistered"
  ): TypedContractEvent<
    VoterRegisteredEvent.InputTuple,
    VoterRegisteredEvent.OutputTuple,
    VoterRegisteredEvent.OutputObject
  >;

  filters: {
    "CreatedElection(uint256)": TypedContractEvent<
      CreatedElectionEvent.InputTuple,
      CreatedElectionEvent.OutputTuple,
      CreatedElectionEvent.OutputObject
    >;
    CreatedElection: TypedContractEvent<
      CreatedElectionEvent.InputTuple,
      CreatedElectionEvent.OutputTuple,
      CreatedElectionEvent.OutputObject
    >;

    "RoleAdminChanged(bytes32,bytes32,bytes32)": TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;
    RoleAdminChanged: TypedContractEvent<
      RoleAdminChangedEvent.InputTuple,
      RoleAdminChangedEvent.OutputTuple,
      RoleAdminChangedEvent.OutputObject
    >;

    "RoleGranted(bytes32,address,address)": TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;
    RoleGranted: TypedContractEvent<
      RoleGrantedEvent.InputTuple,
      RoleGrantedEvent.OutputTuple,
      RoleGrantedEvent.OutputObject
    >;

    "RoleRevoked(bytes32,address,address)": TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;
    RoleRevoked: TypedContractEvent<
      RoleRevokedEvent.InputTuple,
      RoleRevokedEvent.OutputTuple,
      RoleRevokedEvent.OutputObject
    >;

    "VoterRegistered(address)": TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
    VoterRegistered: TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
  };
}
